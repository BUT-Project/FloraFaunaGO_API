// <auto-generated />
using System;
using FloraFauna_GO_Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FloraFauna_GO_Entities.Migrations
{
    [DbContext(typeof(FloraFaunaGoDB))]
    partial class FloraFaunaGoDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("FloraFauna_GO_Entities.CaptureDetailsEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaptureId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCapture")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalisationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shiny")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CaptureId");

                    b.HasIndex("LocalisationId")
                        .IsUnique();

                    b.ToTable("CaptureDetails");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.CaptureEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EspeceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("UtilisateurId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspeceId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Captures");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.EspeceEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Climat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Famille")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Image3D")
                        .HasColumnType("BLOB");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom_scientifique")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Espece");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.EspeceLocalisationEntities", b =>
                {
                    b.Property<string>("EspeceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalisationId")
                        .HasColumnType("TEXT");

                    b.HasKey("EspeceId", "LocalisationId");

                    b.HasIndex("LocalisationId");

                    b.ToTable("EspeceLocalisation");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.LocalisationEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CaptureDetailsId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Rayon")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Localisation");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.SuccesEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Objectif")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Succes");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.SuccesStateEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSucces")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PercentSucces")
                        .HasColumnType("REAL");

                    b.Property<string>("SuccesEntitiesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UtilisateurId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.HasIndex("SuccesEntitiesId", "UtilisateurId")
                        .IsUnique();

                    b.ToTable("SuccesState");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.UtilisateurEntities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash_mdp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.CaptureDetailsEntities", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.CaptureEntities", "Capture")
                        .WithMany("CaptureDetails")
                        .HasForeignKey("CaptureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloraFauna_GO_Entities.LocalisationEntities", "Localisation")
                        .WithOne("CapturesDetail")
                        .HasForeignKey("FloraFauna_GO_Entities.CaptureDetailsEntities", "LocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capture");

                    b.Navigation("Localisation");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.CaptureEntities", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.EspeceEntities", "Espece")
                        .WithMany("Captures")
                        .HasForeignKey("EspeceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", "Utilisateur")
                        .WithMany("Captures")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espece");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.EspeceLocalisationEntities", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.EspeceEntities", "Espece")
                        .WithMany("Localisations")
                        .HasForeignKey("EspeceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloraFauna_GO_Entities.LocalisationEntities", "Localisation")
                        .WithMany("EspeceLocalisation")
                        .HasForeignKey("LocalisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Espece");

                    b.Navigation("Localisation");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.SuccesStateEntities", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.SuccesEntities", "SuccesEntities")
                        .WithMany("SuccesStates")
                        .HasForeignKey("SuccesEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", "UtilisateurEntities")
                        .WithMany("SuccesState")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuccesEntities");

                    b.Navigation("UtilisateurEntities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FloraFauna_GO_Entities.UtilisateurEntities", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.CaptureEntities", b =>
                {
                    b.Navigation("CaptureDetails");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.EspeceEntities", b =>
                {
                    b.Navigation("Captures");

                    b.Navigation("Localisations");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.LocalisationEntities", b =>
                {
                    b.Navigation("CapturesDetail");

                    b.Navigation("EspeceLocalisation");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.SuccesEntities", b =>
                {
                    b.Navigation("SuccesStates");
                });

            modelBuilder.Entity("FloraFauna_GO_Entities.UtilisateurEntities", b =>
                {
                    b.Navigation("Captures");

                    b.Navigation("SuccesState");
                });
#pragma warning restore 612, 618
        }
    }
}
